{"ast":null,"code":"import axiosInstance from \"./httpCLient\";\nimport encryptedLS from \"libs/encryptedLS\";\n\nclass BaseService {\n  constructor() {\n    this.endPoint = \"\";\n    this.setBaseUrl();\n  }\n\n  setBaseUrl() {\n    this.http = axiosInstance;\n  }\n\n  includeDefault(options) {\n    let secureLS = encryptedLS.get(\"___user_data\");\n    let access_token = secureLS && secureLS.access_token ? secureLS.access_token : null;\n    const defaultData = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + access_token\n      }\n    };\n    return Object.assign(defaultData, options);\n  }\n\n  get(options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.get(this.endPoint, opts);\n  }\n\n  getOne(id, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.get(this.endPoint + \"/\" + id, opts);\n  }\n\n  post(data, options = {}) {\n    const opts = this.includeDefault(options);\n    return axiosInstance.post(this.endPoint, data, opts);\n  }\n\n  put(data, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.put(this.endPoint, data, opts);\n  }\n\n  patch(id, data, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.patch(this.endPoint, data, opts);\n  }\n\n  putOne(id, data, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.put(this.endPoint + \"/\" + id, data, opts);\n  }\n\n  delete(id, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.delete(this.endPoint + \"/\" + id, opts);\n  }\n\n}\n\nexport default BaseService;","map":{"version":3,"sources":["/home/arifin/Documents/pretest/dashboard/src/service/baseService.js"],"names":["axiosInstance","encryptedLS","BaseService","constructor","endPoint","setBaseUrl","http","includeDefault","options","secureLS","get","access_token","defaultData","headers","Object","assign","opts","getOne","id","post","data","put","patch","putOne","delete"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,cAA1B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,UAAL;AACD;;AACDA,EAAAA,UAAU,GAAG;AACX,SAAKC,IAAL,GAAYN,aAAZ;AACD;;AAEDO,EAAAA,cAAc,CAACC,OAAD,EAAU;AACtB,QAAIC,QAAQ,GAAGR,WAAW,CAACS,GAAZ,CAAgB,cAAhB,CAAf;AACA,QAAIC,YAAY,GAChBF,QAAQ,IAAIA,QAAQ,CAACE,YAArB,GAAoCF,QAAQ,CAACE,YAA7C,GAA4D,IAD5D;AAGF,UAAMC,WAAW,GAAG;AACnBC,MAAAA,OAAO,EAAE;AACR,wBAAgB,kBADR;AAER,kBAAW,kBAFH;AAGR,yBAAiB,YAAYF;AAHrB;AADU,KAApB;AAOA,WAAOG,MAAM,CAACC,MAAP,CAAcH,WAAd,EAA2BJ,OAA3B,CAAP;AACA;;AAEAE,EAAAA,GAAG,CAACF,OAAO,GAAG,EAAX,EAAe;AAChB,UAAMQ,IAAI,GAAG,KAAKT,cAAL,CAAoBC,OAApB,CAAb;AAEA,WAAO,KAAKF,IAAL,CAAUI,GAAV,CAAc,KAAKN,QAAnB,EAA6BY,IAA7B,CAAP;AACD;;AAEDC,EAAAA,MAAM,CAACC,EAAD,EAAKV,OAAO,GAAG,EAAf,EAAmB;AACvB,UAAMQ,IAAI,GAAG,KAAKT,cAAL,CAAoBC,OAApB,CAAb;AACA,WAAO,KAAKF,IAAL,CAAUI,GAAV,CAAc,KAAKN,QAAL,GAAgB,GAAhB,GAAsBc,EAApC,EAAwCF,IAAxC,CAAP;AACD;;AAEDG,EAAAA,IAAI,CAACC,IAAD,EAAOZ,OAAO,GAAG,EAAjB,EAAqB;AACvB,UAAMQ,IAAI,GAAG,KAAKT,cAAL,CAAoBC,OAApB,CAAb;AACA,WAAOR,aAAa,CAACmB,IAAd,CAAmB,KAAKf,QAAxB,EAAkCgB,IAAlC,EAAwCJ,IAAxC,CAAP;AACD;;AACDK,EAAAA,GAAG,CAACD,IAAD,EAAOZ,OAAO,GAAG,EAAjB,EAAqB;AACtB,UAAMQ,IAAI,GAAG,KAAKT,cAAL,CAAoBC,OAApB,CAAb;AAEA,WAAO,KAAKF,IAAL,CAAUe,GAAV,CAAc,KAAKjB,QAAnB,EAA6BgB,IAA7B,EAAmCJ,IAAnC,CAAP;AACD;;AACDM,EAAAA,KAAK,CAACJ,EAAD,EAAKE,IAAL,EAAWZ,OAAO,GAAG,EAArB,EAAyB;AAC5B,UAAMQ,IAAI,GAAG,KAAKT,cAAL,CAAoBC,OAApB,CAAb;AACA,WAAO,KAAKF,IAAL,CAAUgB,KAAV,CAAgB,KAAKlB,QAArB,EAA+BgB,IAA/B,EAAqCJ,IAArC,CAAP;AACD;;AACDO,EAAAA,MAAM,CAACL,EAAD,EAAKE,IAAL,EAAWZ,OAAO,GAAG,EAArB,EAAyB;AAC7B,UAAMQ,IAAI,GAAG,KAAKT,cAAL,CAAoBC,OAApB,CAAb;AACA,WAAO,KAAKF,IAAL,CAAUe,GAAV,CAAc,KAAKjB,QAAL,GAAgB,GAAhB,GAAsBc,EAApC,EAAwCE,IAAxC,EAA8CJ,IAA9C,CAAP;AACD;;AACDQ,EAAAA,MAAM,CAACN,EAAD,EAAKV,OAAO,GAAG,EAAf,EAAmB;AACvB,UAAMQ,IAAI,GAAG,KAAKT,cAAL,CAAoBC,OAApB,CAAb;AACA,WAAO,KAAKF,IAAL,CAAUkB,MAAV,CAAiB,KAAKpB,QAAL,GAAgB,GAAhB,GAAsBc,EAAvC,EAA2CF,IAA3C,CAAP;AACD;;AAvDe;;AAyDlB,eAAed,WAAf","sourcesContent":["import axiosInstance from \"./httpCLient\";\nimport encryptedLS from \"libs/encryptedLS\";\n\nclass BaseService {\n  constructor() {\n    this.endPoint = \"\";\n    this.setBaseUrl();\n  }\n  setBaseUrl() {\n    this.http = axiosInstance;\n  }\n\n  includeDefault(options) {\n    let secureLS = encryptedLS.get(\"___user_data\");\n    let access_token =\n    secureLS && secureLS.access_token ? secureLS.access_token : null;\n\n\t\tconst defaultData = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept' : 'application/json',\n\t\t\t\t'Authorization': 'Bearer ' + access_token,\n\t\t\t}\n\t\t};\n\t\treturn Object.assign(defaultData, options);\n\t}\n\n  get(options = {}) {\n    const opts = this.includeDefault(options);\n\n    return this.http.get(this.endPoint, opts);\n  }\n\n  getOne(id, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.get(this.endPoint + \"/\" + id, opts);\n  }\n\n  post(data, options = {}) {\n    const opts = this.includeDefault(options);\n    return axiosInstance.post(this.endPoint, data, opts);\n  }\n  put(data, options = {}) {\n    const opts = this.includeDefault(options);\n\n    return this.http.put(this.endPoint, data, opts);\n  }\n  patch(id, data, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.patch(this.endPoint, data, opts);\n  }\n  putOne(id, data, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.put(this.endPoint + \"/\" + id, data, opts);\n  }\n  delete(id, options = {}) {\n    const opts = this.includeDefault(options);\n    return this.http.delete(this.endPoint + \"/\" + id, opts);\n  }\n}\nexport default BaseService;\n"]},"metadata":{},"sourceType":"module"}