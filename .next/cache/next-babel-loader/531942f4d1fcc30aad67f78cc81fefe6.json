{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\nexport var LoginAuth = function LoginAuth(email, password) {\n  return function (dispatch) {\n    return AuthService.login(email, password).then(function (data) {\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          user: data.data.data.user\n        }\n      });\n      encryptedLS.set(\"___user_data\", _objectSpread(_objectSpread({}, data.data.data.token), {}, {\n        permissions: data.data.data.permissions\n      }));\n      return Promise.resolve();\n    }, function (error) {\n      dispatch({\n        type: \"LOGIN_FAIL\"\n      });\n      return Promise.reject();\n    });\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    AuthService.logout();\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n};","map":{"version":3,"sources":["/home/arifin/Documents/pretest/dashboard/src/redux/actions/auth.js"],"names":["AuthService","CompanyService","encryptedLS","showLoadingSpinner","hideLoadingSpinner","LoginAuth","email","password","dispatch","login","then","data","type","payload","user","set","token","permissions","Promise","resolve","error","reject","logout"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,mBAAvD;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,UAACC,QAAD,EAAc;AAC1D,WAAOR,WAAW,CAACS,KAAZ,CAAkBH,KAAlB,EAAyBC,QAAzB,EAAmCG,IAAnC,CACL,UAACC,IAAD,EAAU;AACRH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAEH,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeG;AAAvB;AAFF,OAAD,CAAR;AAKAZ,MAAAA,WAAW,CAACa,GAAZ,CAAgB,cAAhB,kCACKJ,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeK,KADpB;AAEEC,QAAAA,WAAW,EAAEN,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeM;AAF9B;AAKA,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD,KAbI,EAcL,UAACC,KAAD,EAAW;AACTZ,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE;AADC,OAAD,CAAR;AAIA,aAAOM,OAAO,CAACG,MAAR,EAAP;AACD,KApBI,CAAP;AAsBD,GAvBwB;AAAA,CAAlB;AAyBP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,UAACd,QAAD,EAAc;AACxCR,IAAAA,WAAW,CAACsB,MAAZ;AAEAd,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GANqB;AAAA,CAAf","sourcesContent":["import AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\n\nexport const LoginAuth = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: { user: data.data.data.user },\n      });\n\n      encryptedLS.set(\"___user_data\", {\n        ...data.data.data.token,\n        permissions: data.data.data.permissions\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      dispatch({\n        type: \"LOGIN_FAIL\",\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: \"LOGOUT\",\n  });\n};\n"]},"metadata":{},"sourceType":"module"}