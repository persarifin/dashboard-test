{"ast":null,"code":"import RoleService from \"../../service/role\";\nimport { hideLoader, showLoader } from \"redux/actions/loader\";\nimport { hideLoadingSpinner } from \"../../components/Layout\";\nexport const getRole = opts => dispatch => {\n  return RoleService.getRole(opts).then(response => {\n    dispatch(showLoader());\n    const roles = response.data && response.data.data ? response.data.data : [];\n    const included = response.data && response.data.included ? response.data.included : [];\n    const meta = response.data && response.data.meta ? response.data.meta : {};\n    dispatch({\n      type: \"GET_ROLE\",\n      payload: {\n        data: roles,\n        included,\n        meta\n      }\n    });\n    dispatch(hideLoader());\n    return Promise.resolve();\n  }, error => {\n    dispatch({\n      type: \"FAIL\"\n    });\n    hideLoadingSpinner();\n    return Promise.reject(error);\n  });\n};\nexport const storeRole = payload => dispatch => {\n  return RoleService.storeRole(payload).then(data => {\n    // dispatch({\n    //   type: \"STORE_ROLE\",\n    //   payload: {\n    //     data: data.data.data,\n    //   },\n    // });\n    return Promise.resolve();\n  }, error => {\n    dispatch({\n      type: \"FAIL\"\n    });\n    return Promise.reject();\n  });\n};\nexport const updateRole = payload => dispatch => {\n  return RoleService.updateRole(payload).then(data => {\n    // dispatch({\n    //   type: \"UPDATE_ROLE\",\n    //   payload: {\n    //     data: data.data.data,\n    //   },\n    // });\n    return Promise.resolve();\n  }, error => {\n    hideLoadingSpinner();\n    return Promise.reject();\n  });\n};\nexport const destroyRole = id => dispatch => {\n  return RoleService.deleteRole(id).then(data => {\n    dispatch({\n      type: \"DELETE_ROLE\"\n    });\n  }, error => {\n    hideLoadingSpinner();\n  });\n};","map":{"version":3,"sources":["/home/arifin/Documents/pretest/dashboard/src/redux/actions/role.js"],"names":["RoleService","hideLoader","showLoader","hideLoadingSpinner","getRole","opts","dispatch","then","response","roles","data","included","meta","type","payload","Promise","resolve","error","reject","storeRole","updateRole","destroyRole","id","deleteRole"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,sBAAvC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAEA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAWC,QAAD,IAAc;AAC7C,SAAON,WAAW,CAACI,OAAZ,CAAoBC,IAApB,EAA0BE,IAA1B,CACJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACA,UAAMO,KAAK,GACTD,QAAQ,CAACE,IAAT,IAAiBF,QAAQ,CAACE,IAAT,CAAcA,IAA/B,GAAsCF,QAAQ,CAACE,IAAT,CAAcA,IAApD,GAA2D,EAD7D;AAEA,UAAMC,QAAQ,GACZH,QAAQ,CAACE,IAAT,IAAiBF,QAAQ,CAACE,IAAT,CAAcC,QAA/B,GAA0CH,QAAQ,CAACE,IAAT,CAAcC,QAAxD,GAAmE,EADrE;AAEA,UAAMC,IAAI,GACRJ,QAAQ,CAACE,IAAT,IAAiBF,QAAQ,CAACE,IAAT,CAAcE,IAA/B,GAAsCJ,QAAQ,CAACE,IAAT,CAAcE,IAApD,GAA2D,EAD7D;AAEAN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAE,UADC;AAEPC,MAAAA,OAAO,EAAE;AACPJ,QAAAA,IAAI,EAAED,KADC;AAEPE,QAAAA,QAFO;AAGPC,QAAAA;AAHO;AAFF,KAAD,CAAR;AAQAN,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACA,WAAOc,OAAO,CAACC,OAAR,EAAP;AACD,GAnBI,EAoBJC,KAAD,IAAW;AACTX,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGAV,IAAAA,kBAAkB;AAClB,WAAOY,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACD,GA1BI,CAAP;AA4BD,CA7BM;AA+BP,OAAO,MAAME,SAAS,GAAIL,OAAD,IAAcR,QAAD,IAAc;AAClD,SAAON,WAAW,CAACmB,SAAZ,CAAsBL,OAAtB,EAA+BP,IAA/B,CACJG,IAAD,IAAU;AACR;AACA;AACA;AACA;AACA;AACA;AACA,WAAOK,OAAO,CAACC,OAAR,EAAP;AACD,GATI,EAUJC,KAAD,IAAW;AACTX,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAIA,WAAOE,OAAO,CAACG,MAAR,EAAP;AACD,GAhBI,CAAP;AAkBD,CAnBM;AAqBP,OAAO,MAAME,UAAU,GAAIN,OAAD,IAAcR,QAAD,IAAc;AACnD,SAAON,WAAW,CAACoB,UAAZ,CAAuBN,OAAvB,EAAgCP,IAAhC,CACJG,IAAD,IAAU;AACR;AACA;AACA;AACA;AACA;AACA;AACA,WAAOK,OAAO,CAACC,OAAR,EAAP;AACD,GATI,EAUJC,KAAD,IAAW;AACTd,IAAAA,kBAAkB;AAClB,WAAOY,OAAO,CAACG,MAAR,EAAP;AACD,GAbI,CAAP;AAeD,CAhBM;AAkBP,OAAO,MAAMG,WAAW,GAAIC,EAAD,IAAShB,QAAD,IAAc;AAC/C,SAAON,WAAW,CAACuB,UAAZ,CAAuBD,EAAvB,EAA2Bf,IAA3B,CACJG,IAAD,IAAU;AACRJ,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GALI,EAMJI,KAAD,IAAW;AACTd,IAAAA,kBAAkB;AACnB,GARI,CAAP;AAUD,CAXM","sourcesContent":["import RoleService from \"../../service/role\";\nimport { hideLoader, showLoader } from \"redux/actions/loader\";\nimport { hideLoadingSpinner } from \"../../components/Layout\";\n\nexport const getRole = (opts) => (dispatch) => {\n  return RoleService.getRole(opts).then(\n    (response) => {\n      dispatch(showLoader());\n      const roles =\n        response.data && response.data.data ? response.data.data : [];\n      const included =\n        response.data && response.data.included ? response.data.included : [];\n      const meta =\n        response.data && response.data.meta ? response.data.meta : {};\n      dispatch({\n        type: \"GET_ROLE\",\n        payload: {\n          data: roles,\n          included,\n          meta,\n        },\n      });\n      dispatch(hideLoader());\n      return Promise.resolve();\n    },\n    (error) => {\n      dispatch({\n        type: \"FAIL\",\n      });\n      hideLoadingSpinner();\n      return Promise.reject(error);\n    }\n  );\n};\n\nexport const storeRole = (payload) => (dispatch) => {\n  return RoleService.storeRole(payload).then(\n    (data) => {\n      // dispatch({\n      //   type: \"STORE_ROLE\",\n      //   payload: {\n      //     data: data.data.data,\n      //   },\n      // });\n      return Promise.resolve();\n    },\n    (error) => {\n      dispatch({\n        type: \"FAIL\",\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const updateRole = (payload) => (dispatch) => {\n  return RoleService.updateRole(payload).then(\n    (data) => {\n      // dispatch({\n      //   type: \"UPDATE_ROLE\",\n      //   payload: {\n      //     data: data.data.data,\n      //   },\n      // });\n      return Promise.resolve();\n    },\n    (error) => {\n      hideLoadingSpinner();\n      return Promise.reject();\n    }\n  );\n};\n\nexport const destroyRole = (id) => (dispatch) => {\n  return RoleService.deleteRole(id).then(\n    (data) => {\n      dispatch({\n        type: \"DELETE_ROLE\",\n      });\n    },\n    (error) => {\n      hideLoadingSpinner();\n    }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}