{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\nexport var LoginAuth = function LoginAuth(email, password) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var response, user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              showLoadingSpinner();\n              _context.prev = 1;\n              _context.next = 4;\n              return AuthService.login(email, password);\n\n            case 4:\n              response = _context.sent;\n              user = response.data.data.user;\n              dispatch({\n                type: \"LOGIN_SUCCESS\",\n                payload: {\n                  user: user\n                }\n              });\n              encryptedLS.set(\"___user_data\", _objectSpread(_objectSpread({}, response.data.data.token), {}, {\n                roles: response.data.data.user.roles,\n                permissions: response.data.data.permissions\n              }));\n              return _context.abrupt(\"return\", true);\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n              hideLoadingSpinner();\n              throw {\n                message: _context.t0\n              };\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; // export const LoginAuth = (email, password) => (dispatch) => {\n//   return AuthService.login(email, password).then(\n//     (data) => {\n//       dispatch({\n//         type: \"LOGIN_SUCCESS\",\n//         payload: { user: data.data.data.user },\n//       });\n//       encryptedLS.set(\"___user_data\", {\n//         ...data.data.data.token,\n//         permissions: data.data.data.permissions\n//       });\n//       return Promise.resolve();\n//     },\n//     (error) => {\n//       dispatch({\n//         type: \"LOGIN_FAIL\",\n//       });\n//       return Promise.reject();\n//     }\n//   );\n// };\n\nexport var logout = function logout() {\n  return function (dispatch) {\n    AuthService.logout();\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n};","map":{"version":3,"sources":["/home/arifin/Documents/pretest/dashboard/src/redux/actions/auth.js"],"names":["AuthService","CompanyService","encryptedLS","showLoadingSpinner","hideLoadingSpinner","LoginAuth","email","password","dispatch","login","response","user","data","type","payload","set","token","roles","permissions","console","log","message","logout"],"mappings":";;;;;;;;AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,mBAAvD;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,QAAR;AAAA;AAAA,wEAAqB,iBAC5CC,QAD4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAG5CL,cAAAA,kBAAkB;AAH0B;AAAA;AAAA,qBAKrBH,WAAW,CAACS,KAAZ,CAAkBH,KAAlB,EAAyBC,QAAzB,CALqB;;AAAA;AAKtCG,cAAAA,QALsC;AAOpCC,cAAAA,IAPoC,GAO7BD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBD,IAPU;AAS1CH,cAAAA,QAAQ,CAAC;AACPK,gBAAAA,IAAI,EAAE,eADC;AAEPC,gBAAAA,OAAO,EAAE;AAAEH,kBAAAA,IAAI,EAAJA;AAAF;AAFF,eAAD,CAAR;AAKAT,cAAAA,WAAW,CAACa,GAAZ,CAAgB,cAAhB,kCACKL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,KADxB;AAEEC,gBAAAA,KAAK,EAAEP,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBD,IAAnB,CAAwBM,KAFjC;AAGEC,gBAAAA,WAAW,EAAER,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM;AAHlC;AAd0C,+CAmBnC,IAnBmC;;AAAA;AAAA;AAAA;AAqB1CC,cAAAA,OAAO,CAACC,GAAR;AACAhB,cAAAA,kBAAkB;AAtBwB,oBAuBpC;AACJiB,gBAAAA,OAAO;AADH,eAvBoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB,C,CA4BP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,UAACd,QAAD,EAAc;AACxCR,IAAAA,WAAW,CAACsB,MAAZ;AAEAd,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GANqB;AAAA,CAAf","sourcesContent":["import AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\n\nexport const LoginAuth = (email, password) => async (\n  dispatch\n) => {\n  showLoadingSpinner();\n  try {\n    let response = await AuthService.login(email, password);\n\n    const user = response.data.data.user;\n\n    dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: { user },\n    });\n\n    encryptedLS.set(\"___user_data\", {\n      ...response.data.data.token,\n      roles: response.data.data.user.roles,\n      permissions: response.data.data.permissions,\n    });\n    return true;\n  } catch (e) {\n    console.log(e)\n    hideLoadingSpinner();\n    throw {\n      message: e,\n    };\n  }\n};\n// export const LoginAuth = (email, password) => (dispatch) => {\n//   return AuthService.login(email, password).then(\n//     (data) => {\n//       dispatch({\n//         type: \"LOGIN_SUCCESS\",\n//         payload: { user: data.data.data.user },\n//       });\n\n//       encryptedLS.set(\"___user_data\", {\n//         ...data.data.data.token,\n//         permissions: data.data.data.permissions\n//       });\n\n//       return Promise.resolve();\n//     },\n//     (error) => {\n//       dispatch({\n//         type: \"LOGIN_FAIL\",\n//       });\n\n//       return Promise.reject();\n//     }\n//   );\n// };\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: \"LOGOUT\",\n  });\n};\n"]},"metadata":{},"sourceType":"module"}