{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\nexport const LoginAuth = (email, password, interfaceApps) => async (dispatch) => {\n  showLoadingSpinner();\n\n  try {\n    let response = await AuthService.login(email, password, interfaceApps);\n    const user = response.data.data.user;\n    dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: {\n        user\n      }\n    });\n    encryptedLS.set(\"___user_data\", _objectSpread(_objectSpread({}, response.data.data.token), {}, {\n      userCompanyId: response.data.data.user.company_id,\n      roles: response.data.data.user.roles,\n      permissions: response.data.data.permissions\n    }));\n    const optsCompany = {\n      params: {\n        include: \"not_approved_billing_invoice,company_attachments\"\n      }\n    };\n    response = await CompanyService.getCompany({\n      company_id: user.company_id\n    }, optsCompany);\n    dispatch({\n      type: \"GET_COMPANY\",\n      payload: {\n        data: response.data.data,\n        included: response.data.included\n      }\n    });\n    return true;\n  } catch (e) {\n    console.log(e);\n    hideLoadingSpinner();\n    throw {\n      message: e\n    };\n  }\n}; // export const LoginAuth = (email, password) => (dispatch) => {\n//   return AuthService.login(email, password).then(\n//     (data) => {\n//       dispatch({\n//         type: \"LOGIN_SUCCESS\",\n//         payload: { user: data.data.data.user },\n//       });\n//       encryptedLS.set(\"___user_data\", {\n//         ...data.data.data.token,\n//         permissions: data.data.data.permissions\n//       });\n//       return Promise.resolve();\n//     },\n//     (error) => {\n//       dispatch({\n//         type: \"LOGIN_FAIL\",\n//       });\n//       return Promise.reject();\n//     }\n//   );\n// };\n\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: \"LOGOUT\"\n  });\n};","map":{"version":3,"sources":["/home/arifin/Documents/pretest/dashboard/src/redux/actions/auth.js"],"names":["AuthService","CompanyService","encryptedLS","showLoadingSpinner","hideLoadingSpinner","LoginAuth","email","password","interfaceApps","dispatch","response","login","user","data","type","payload","set","token","userCompanyId","company_id","roles","permissions","optsCompany","params","include","getCompany","included","e","console","log","message","logout"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,mBAAvD;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,KAAoC,OAC3DC,QAD2D,KAExD;AACHN,EAAAA,kBAAkB;;AAClB,MAAI;AACF,QAAIO,QAAQ,GAAG,MAAMV,WAAW,CAACW,KAAZ,CAAkBL,KAAlB,EAAyBC,QAAzB,EAAmCC,aAAnC,CAArB;AAEA,UAAMI,IAAI,GAAGF,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBD,IAAhC;AAEAH,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAE;AAAEH,QAAAA;AAAF;AAFF,KAAD,CAAR;AAKAV,IAAAA,WAAW,CAACc,GAAZ,CAAgB,cAAhB,kCACKN,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBI,KADxB;AAEEC,MAAAA,aAAa,EAAER,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBD,IAAnB,CAAwBO,UAFzC;AAGEC,MAAAA,KAAK,EAAEV,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBD,IAAnB,CAAwBQ,KAHjC;AAIEC,MAAAA,WAAW,EAAEX,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBQ;AAJlC;AAMA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE;AADH;AADU,KAApB;AAKAd,IAAAA,QAAQ,GAAG,MAAMT,cAAc,CAACwB,UAAf,CACf;AACEN,MAAAA,UAAU,EAAEP,IAAI,CAACO;AADnB,KADe,EAIfG,WAJe,CAAjB;AAOAb,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,OAAO,EAAE;AACPF,QAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAT,CAAcA,IADb;AAEPa,QAAAA,QAAQ,EAAEhB,QAAQ,CAACG,IAAT,CAAca;AAFjB;AAFF,KAAD,CAAR;AAQA,WAAO,IAAP;AACD,GArCD,CAqCE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAvB,IAAAA,kBAAkB;AAClB,UAAM;AACJ0B,MAAAA,OAAO,EAAEH;AADL,KAAN;AAGD;AACF,CAhDM,C,CAiDP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,MAAM,GAAG,MAAOtB,QAAD,IAAc;AACxCT,EAAAA,WAAW,CAAC+B,MAAZ;AAEAtB,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAE;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["import AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\n\nexport const LoginAuth = (email, password, interfaceApps) => async (\n  dispatch\n) => {\n  showLoadingSpinner();\n  try {\n    let response = await AuthService.login(email, password, interfaceApps);\n\n    const user = response.data.data.user;\n\n    dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: { user },\n    });\n\n    encryptedLS.set(\"___user_data\", {\n      ...response.data.data.token,\n      userCompanyId: response.data.data.user.company_id,\n      roles: response.data.data.user.roles,\n      permissions: response.data.data.permissions,\n    });\n    const optsCompany = {\n      params: {\n        include: \"not_approved_billing_invoice,company_attachments\",\n      },\n    };\n    response = await CompanyService.getCompany(\n      {\n        company_id: user.company_id,\n      },\n      optsCompany\n    );\n\n    dispatch({\n      type: \"GET_COMPANY\",\n      payload: {\n        data: response.data.data,\n        included: response.data.included,\n      },\n    });\n\n    return true;\n  } catch (e) {\n    console.log(e)\n    hideLoadingSpinner();\n    throw {\n      message: e,\n    };\n  }\n};\n// export const LoginAuth = (email, password) => (dispatch) => {\n//   return AuthService.login(email, password).then(\n//     (data) => {\n//       dispatch({\n//         type: \"LOGIN_SUCCESS\",\n//         payload: { user: data.data.data.user },\n//       });\n\n//       encryptedLS.set(\"___user_data\", {\n//         ...data.data.data.token,\n//         permissions: data.data.data.permissions\n//       });\n\n//       return Promise.resolve();\n//     },\n//     (error) => {\n//       dispatch({\n//         type: \"LOGIN_FAIL\",\n//       });\n\n//       return Promise.reject();\n//     }\n//   );\n// };\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: \"LOGOUT\",\n  });\n};\n"]},"metadata":{},"sourceType":"module"}