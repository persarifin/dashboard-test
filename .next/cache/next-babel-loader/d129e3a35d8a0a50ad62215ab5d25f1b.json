{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\nexport const LoginAuth = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: {\n        user: data.data.data.user\n      }\n    });\n    encryptedLS.set(\"___user_data\", _objectSpread(_objectSpread({}, data.data.data.token), {}, {\n      permissions: data.data.data.permissions\n    }));\n    return Promise.resolve();\n  }, error => {\n    dispatch({\n      type: \"LOGIN_FAIL\"\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: \"LOGOUT\"\n  });\n};","map":{"version":3,"sources":["/home/arifin/Documents/pretest/dashboard/src/redux/actions/auth.js"],"names":["AuthService","CompanyService","encryptedLS","showLoadingSpinner","hideLoadingSpinner","LoginAuth","email","password","dispatch","login","then","data","type","payload","user","set","token","permissions","Promise","resolve","error","reject","logout"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,mBAAvD;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBC,QAAD,IAAc;AAC1D,SAAOR,WAAW,CAACS,KAAZ,CAAkBH,KAAlB,EAAyBC,QAAzB,EAAmCG,IAAnC,CACJC,IAAD,IAAU;AACRH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeG;AAAvB;AAFF,KAAD,CAAR;AAKAZ,IAAAA,WAAW,CAACa,GAAZ,CAAgB,cAAhB,kCACKJ,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeK,KADpB;AAEEC,MAAAA,WAAW,EAAEN,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeM;AAF9B;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAbI,EAcJC,KAAD,IAAW;AACTZ,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAIA,WAAOM,OAAO,CAACG,MAAR,EAAP;AACD,GApBI,CAAP;AAsBD,CAvBM;AAyBP,OAAO,MAAMC,MAAM,GAAG,MAAOd,QAAD,IAAc;AACxCR,EAAAA,WAAW,CAACsB,MAAZ;AAEAd,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAE;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["import AuthService from \"../../service/auth\";\nimport CompanyService from \"../../service/company\";\nimport encryptedLS from \"libs/encryptedLS\";\nimport { showLoadingSpinner, hideLoadingSpinner } from \"components/Layout\";\n\nexport const LoginAuth = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: { user: data.data.data.user },\n      });\n\n      encryptedLS.set(\"___user_data\", {\n        ...data.data.data.token,\n        permissions: data.data.data.permissions\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      dispatch({\n        type: \"LOGIN_FAIL\",\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: \"LOGOUT\",\n  });\n};\n"]},"metadata":{},"sourceType":"module"}