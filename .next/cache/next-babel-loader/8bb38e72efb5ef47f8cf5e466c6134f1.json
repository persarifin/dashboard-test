{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nvar timer;\nvar state;\nvar activeRequests = 0;\nvar delay = 250;\n\nfunction load() {\n  if (state === \"loading\") {\n    return;\n  }\n\n  state = \"loading\";\n  timer = setTimeout(function () {\n    NProgress.start();\n  }, delay); // only show progress bar if it takes longer than the delay\n}\n\nfunction stop() {\n  if (activeRequests > 0) {\n    return;\n  }\n\n  state = \"stop\";\n  clearTimeout(timer);\n  NProgress.done();\n}\n\nRouter.events.on(\"routeChangeStart\", load);\nRouter.events.on(\"routeChangeComplete\", stop);\nRouter.events.on(\"routeChangeError\", stop);\nvar originalFetch = window.fetch;\nwindow.fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var response,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (activeRequests === 0) {\n            load();\n          }\n\n          activeRequests++;\n          _context.prev = 2;\n          _context.next = 5;\n          return originalFetch.apply(void 0, _args);\n\n        case 5:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response);\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](2);\n          return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n        case 12:\n          _context.prev = 12;\n          activeRequests -= 1;\n\n          if (activeRequests === 0) {\n            stop();\n          }\n\n          return _context.finish(12);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, null, [[2, 9, 12, 16]]);\n}));\nexport default function () {\n  return null;\n}","map":{"version":3,"sources":["/home/arifin/Documents/pretest/dashboard/src/components/TopProgressBar.js"],"names":["Router","NProgress","timer","state","activeRequests","delay","load","setTimeout","start","stop","clearTimeout","done","events","on","originalFetch","window","fetch","response","Promise","reject"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAIC,KAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAMC,KAAK,GAAG,GAAd;;AAEA,SAASC,IAAT,GAAgB;AACd,MAAIH,KAAK,KAAK,SAAd,EAAyB;AACvB;AACD;;AAEDA,EAAAA,KAAK,GAAG,SAAR;AAEAD,EAAAA,KAAK,GAAGK,UAAU,CAAC,YAAY;AAC7BN,IAAAA,SAAS,CAACO,KAAV;AACD,GAFiB,EAEfH,KAFe,CAAlB,CAPc,CASH;AACZ;;AAED,SAASI,IAAT,GAAgB;AACd,MAAIL,cAAc,GAAG,CAArB,EAAwB;AACtB;AACD;;AAEDD,EAAAA,KAAK,GAAG,MAAR;AAEAO,EAAAA,YAAY,CAACR,KAAD,CAAZ;AACAD,EAAAA,SAAS,CAACU,IAAV;AACD;;AAEDX,MAAM,CAACY,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCP,IAArC;AACAN,MAAM,CAACY,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCJ,IAAxC;AACAT,MAAM,CAACY,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCJ,IAArC;AAEA,IAAMK,aAAa,GAAGC,MAAM,CAACC,KAA7B;AACAD,MAAM,CAACC,KAAP,yEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,cAAIZ,cAAc,KAAK,CAAvB,EAA0B;AACxBE,YAAAA,IAAI;AACL;;AAEDF,UAAAA,cAAc;AALD;AAAA;AAAA,iBAQYU,aAAa,MAAb,eARZ;;AAAA;AAQLG,UAAAA,QARK;AAAA,2CASJA,QATI;;AAAA;AAAA;AAAA;AAAA,2CAWJC,OAAO,CAACC,MAAR,aAXI;;AAAA;AAAA;AAaXf,UAAAA,cAAc,IAAI,CAAlB;;AACA,cAAIA,cAAc,KAAK,CAAvB,EAA0B;AACxBK,YAAAA,IAAI;AACL;;AAhBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;AAoBA,eAAe,YAAY;AACzB,SAAO,IAAP;AACD","sourcesContent":["import Router from \"next/router\";\nimport NProgress from \"nprogress\";\n\nlet timer;\nlet state;\nlet activeRequests = 0;\nconst delay = 250;\n\nfunction load() {\n  if (state === \"loading\") {\n    return;\n  }\n\n  state = \"loading\";\n\n  timer = setTimeout(function () {\n    NProgress.start();\n  }, delay); // only show progress bar if it takes longer than the delay\n}\n\nfunction stop() {\n  if (activeRequests > 0) {\n    return;\n  }\n\n  state = \"stop\";\n\n  clearTimeout(timer);\n  NProgress.done();\n}\n\nRouter.events.on(\"routeChangeStart\", load);\nRouter.events.on(\"routeChangeComplete\", stop);\nRouter.events.on(\"routeChangeError\", stop);\n\nconst originalFetch = window.fetch;\nwindow.fetch = async function (...args) {\n  if (activeRequests === 0) {\n    load();\n  }\n\n  activeRequests++;\n\n  try {\n    const response = await originalFetch(...args);\n    return response;\n  } catch (error) {\n    return Promise.reject(error);\n  } finally {\n    activeRequests -= 1;\n    if (activeRequests === 0) {\n      stop();\n    }\n  }\n};\n\nexport default function () {\n  return null;\n}"]},"metadata":{},"sourceType":"module"}